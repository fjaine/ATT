commdat
combdata
id=c("77523327","51448749")
## Combine Tag.Detection and Tag.Metadata into a combined tibble for plotting
combdata<- left_join(ATTdata$Tag.Detections, ATTdata$Tag.Metadata, by="Tag.ID")
## Subset Tag.ID if 'id' is supplied
if(!is.null(id)){
combdata<- combdata %>%
filter(Tag.ID %in% id)
}
table(combdata$Tag.ID)
roxygen2::roxygenise()
remove.packages("ATT")
?format
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
roxygen2::roxygenise()
install.packages("stringi")
roxygen2::roxygenise()
library(stringi)
library(roxygen2)
library(stringi)
install.packages("stringo")
install.packages("stringi")
options("repos")
sessionIngo()
sessionInfo()
install.packages("stringi")
library(roxygen2)
library(stringi)
library(roxygen2)
library.dynam
?library.dynam
install.packages("devtools")
library(devtools)
install.packages("roxygen2")
library(roxygen2)
library.dynam()
install.packages("yaml")
install.packages("yaml")
library(stringi)
install.packages("stringi")
install.packages("stringi")
library(roxygen2)
roxygenize()
library(devtools)
install_github("vinayudyawer/ATT")
remove.packages("ATT")
install_github("vinayudyawer/ATT")
?HRSummary
library(ATT)
?HRSummary
roxygenize()
remove.packages("ATT")
install_github("vinayudyawer/ATT")
?coordinates
?projections
?projection
?CRS
?as_tibble
roxygenize()
remove.packages("ATT")
install_github("vinayudyawer/ATT")
?subset
install_github("vinayudyawer/ATT")
install_github("vinayudyawer/ATT")
?spTransform
install_github("vinayudyawer/ATT")
install_github("vinayudyawer/ATT")
library(ATT)
?COA
example("ATT")
example("COA")
COAdata
class(COAdata)
example("setupData")
?setupData
remove.packages("ATT")
install_github("vinayudyawer/ATT")
?setupData
?COA
library(ATT)
?COA
?dispersalSummary
?setupData
?detectionSummary
example("setupData")
?%>%
?"%>%"
?reexports
?magrittr
remove.packages("ATT")
devtools::intall_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
example("setupData")
?setupData
library(ATT)
?setupData
data(tagdata)
data(taginfo)
data(statinfo)
ATTdata<-setupData(tagdata,taginfo,statinfo)
remove.packages("ATT")
library(devtools)
install_github("vinayudyawer/ATT")
example("setupData")
data(tagdata)
data(taginfo)
data(statinfo)
ATTdata(tagdata,taginfo,statinfo)
ATTdata<-setupData(tagdata,taginfo,statinfo)
install_github("vinayudyawer/ATT")
ATTdata<-setupData(tagdata,taginfo,statinfo)
disp<-dispersalSummary(ATTdata)
disp<-detectionSummary(ATTdata)
install_github("vinayudyawer/ATT")
disp<-dispersalSummary(ATTdata)
?projection
install_github("vinayudyawer/ATT")
install_github("vinayudyawer/ATT")
disp<-dispersalSummary(ATTdata)
projection
library(raster)
projection
detach("package:raster", unload=TRUE)
detach("package:sp", unload=TRUE)
install_github("vinayudyawer/ATT")
projection
library(raster)
projection
class(projection)
install_github("vinayudyawer/ATT")
ATTdata<-setupData(tagdata,taginfo,statinfo)
disp<-dispersalSummary(ATTdata)
disp
det<-detectionSummary(ATTdata)
??days_in_month
install_github("vinayudyawer/ATT")
det<-detectionSummary(ATTdata)
install_github("vinayudyawer/ATT")
det<-detectionSummary(ATTdata)
install_github("vinayudyawer/ATT")
det<-detectionSummary(ATTdata)
disp<-dispersalSummary(ATTdata)
COAdata<-COA(ATTdata)
hr<-HRSummary(COAdata)
?HRSummary
?HRSummary
library(ATT)
?HRSummary
proj<-CRS("+init=epsg:3577")
hr<-HRSummary(COAdata, projCRS = CRS("+init=epsg:3577"))
COAdata<-COA(setupData(tagdata, taginfo, statinfo))
data(tagdata)
data(taginfo)
data(statinfo)
COAdata<-COA(setupData(tagdata, taginfo, statinfo))
hr<-HRSummary(COAdata, projCRS = CRS("+init=epsg:3577"))
?CRS
library(sp)
hr<-HRSummary(COAdata, projCRS = CRS("+init=epsg:3577"))
library(raster)
hr<-HRSummary(COAdata, projCRS = CRS("+init=epsg:3577"))
hr
?CRS
install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
library(ATT)
data(tagdata); data(taginfo); data(statinfo)
att<-setupData(tagdata,taginfo,statinfo)
disp<-dispersalSummary(at)
disp<-dispersalSummary(att)
devtools::install_github("vinayudyawer/ATT")
disp<-dispersalSummary(att)
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
example("HRSummary")
disp<-dispersalSummary(att)
att<-setupData(tagdata, taginfo, statinfo)
coa<-COA(att)
det<-detectionSummary(att)
dat
det
hr<-HRSummary(coa, CRS("+init=epsg:3577"))
hr
hr$p
hr$Overall
data<-read.csv(file.choose())
library(data.table)
data<-fread(file.choose())
data<-read.csv(file.choose())
head(data)
data<-read.csv(file.choose())
data
head(data)
imos<-read.csv(file.choose())
head(imos)
library(maptools)
spDistsN1()
spDistsN1
gzAzimuth()
gzAzimuth
library(ATT)
data(tagdata)
data(taginfo)
data(statinfo)
ATTdata<-setupData(tagdata,taginfo,statinfo)
detectionSummary(ATTdata)
a<-detectionSummary(ATTdata)
a$Overall
abacusPlot(ATTdata)
a$Subsetted
b<-dispersalSummary(ATTdata)
b
abacusPlot(ATTdata, facet = T)
library(glatos)
?`glatos-package`
read_glatos_detections()
read_glatos_detections
View(read_glatos_detections)
View(read_OTN_detections)
View(read_otn_detections)
head(statinfo)
head(data)
data(tagdata)
library(utils)
library(devltoos)
library(devtools)
use_data()
IMOSdata<-tagdata
head(IMOSdata)
use_data(IMOSdata)
VEMCOdata<-read.csv(file.choose())
head(IMOSdata)
vem<-read.csv(file.choose())
vem
library(data.table)
vem<-fread(file.choose())
vem<-read.csv(file.choose())
head(vem)
head(IMOSdata)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)))
library(tidyverse)
library(lubridate)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)))
head(VEMCOdata)
View(vem)
VEMCOdata<- tagdata %>%
transmute(Date.and.Time..UTC. = as.character(lubridate::ymd_hms(detection_timestamp)),
Receiver = receiver_name,
Transmitter = transmitter_id,
Transmitter.Name = NA,
Transmitter.Serial = tag_id,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit,
Station.Name = station_name,
Latitude = latitude,
Longitude = longitude)
head(VEMCOdata)
use_data(VEMCOdata)
data(IMOSdata)
data(VEMCOdata)
head(VEMCOdata)
source
if(source)
(source)
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
object<-
structure(
list(
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)},
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)}
object<-
structure(
list(
Tag.Detections,
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
data(taginfo)
data(statinfo)
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
library(sp)
?CRS
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
#' ## Import example datasets
#' data(tagdata)
#' data(taginfo)
#' data(statinfo)
#'
#' ## Setup data
#' ATTdata<- setupData(Tag.Detections = tagdata, Tag.Metadata = taginfo, Station.Information = statinfo)
#' ATTdata
#'
#'
setupData<-function(Tag.Detections, Tag.Metadata, Station.Information, source=NULL, tz="UTC", crs=NULL){
if(is.null(source))
stop("Can't recognize the source of your tag detection data.
\nsource should be either 'IMOS' or 'VEMCO'")
if(source %in% "IMOS"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(detection_timestamp, tz=tz),
Tag.ID = tag_id,
Transmitter.Name = transmitter_id,
Station.Name = station_name,
Receiver = receiver_name,
Latitude = latitude,
Longitude = longitude,
Sensor.Value = sensor_value,
Sensor.Unit = sensor_unit)}
if(source %in% "VEMCO"){
Tag.Detections = as_tibble(Tag.Detections) %>%
transmute(Date.Time = lubridate::ymd_hms(Date.and.Time..UTC., tz=tz),
Transmitter = Transmitter,
Station.Name = Station.Name,
Receiver = Receiver,
Latitude = Latitude,
Longitude = Longitude,
Sensor.Value = Sensor.Value,
Sensor.Unit = Sensor.Unit)}
object<-
structure(
list(
Tag.Detections = Tag.Detections,
Tag.Metadata = as_tibble(Tag.Metadata) %>%
transmute(Tag.ID = tag_id,
Sci.Name = scientific_name,
Common.Name = common_name,
Tag.Project = tag_project_name,
Release.Latitude = release_latitude,
Release.Longitude = release_longitude,
Release.Date = lubridate::date(ymd_hms(taginfo$ReleaseDate, tz=tz)),
Tag.Life = tag_expected_life_time_days,
Tag.Status = tag_status,
Sex = sex,
Bio = measurement),
Station.Information = as_tibble(Station.Information) %>%
transmute(Station.Name = station_name,
Receiver = receiver_name,
Installation = installation_name,
Receiver.Project = project_name,
Deployment.Date = lubridate::ymd_hms(deploymentdatetime_timestamp, tz=tz),
Recovery.Date = lubridate::ymd_hms(recoverydatetime_timestamp, tz=tz),
Station.Latitude = station_latitude,
Station.Longitude = station_longitude,
Receiver.Status = status)),
class="ATT")
if(inherits(crs, "CRS")){
attr(object, "CRS")<-crs
}else{
message("Geographic projection for detection positions not recognised, reverting to WGS84 global coordinate reference system")
attr(object, "CRS")<-CRS("+init=epsg:4326")
}
return(object)
}
setupData(VEMCOdata, taginfo, statinfo, source="VEMCO")
setupData(IMOSdata, taginfo, statinfo, source="VEMCO")
setupData(IMOSdata, taginfo, statinfo, source="IMOS")
head(IMOSdata)
taginfo
install_github("vinayudyawer/ATT")
install_github("vinayudyawer/ATT")
data("IMOSdata")
ATTdata<-setupData(IMOSdata, taginfo, statinfo)
library(ATT)
data("IMOSdata")
data("taginfo")
data("statinfo")
ATTdata<-setupData(IMOSdata, taginfo, statinfo)
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="VEMCO")
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
ATTdata
abacusPlot(ATTdata)
install_github("vinayudyawer/ATT")
devtools::install_github("vinayudyawer/ATT")
library(ATT)
ATTdata<-setupData(IMOSdata, taginfo, statinfo, source="IMOS")
abacusPlot(ATTdata)
