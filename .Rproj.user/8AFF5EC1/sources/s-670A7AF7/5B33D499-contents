
disPlot<-function(ATTdata, leaflet=FALSE, ggmap.arg=NULL, leaflet.arg=NULL){

  suppressPackageStartupMessages({require(ggmap); require(leaflet)})

  if(!inherits(ATTdata, "ATT"))
    stop("Oops! Input data needs to be an 'ATT' object.
         \nSet up your data first using setupData() before running this operation")

  ## Combine Tag.Detection and Tag.Metadata into a combined tibble for plotting
  data<- left_join(ATTdata$Tag.Detections, ATTdata$Tag.Metadata, by="Tag.ID")

  if(leaflet){

    leaflet() %>%

      # Base groups
      addProviderTiles(providers$Esri.WorldImagery, group="Satellite") %>%
      addProviderTiles(providers$OpenStreetMap, group="Map") %>%

      # Add reciever location data
      addCircles(lng=data$Longitude, lat=data$Latitude, fill=FALSE, color="red", weight=8)

  }else{
    d_bbox <- make_bbox(lon = data$Longitude,
                        lat = data$Latitude, f = 0.3) # f controls the Google Zoom

    # Lets download a Google base map for our region
    d_map <- get_map(location = d_bbox, source = "google", maptype = "hybrid")

    ggmap(d_map) +
      geom_point(data = data.frame(cb),
                 mapping = aes(x = Longitude, y = Latitude)) +
      xlab("Longitude") + ylab("Latitude")

  }
}


data(tagdata)
data(taginfo)
data(statinfo)

source("R/setupData.R")
source("R/detectionSummary.R")
source("R/dispersalSummary.R")
source("R/COA.R")
source("R/HRSummary.R")
source("R/HRprocess.R")
source("R/abacusPlot.R")
ATTdata<-setupData(tagdata, taginfo, statinfo)

d<-detectionSummary(ATTdata)

abacusPlot(ATTdata)

dd<-dispersalSummary(ATTdata)

hr<-HRSummary(COAdata, projCRS=CRS("+init=epsg:3577"))
